{"version":3,"sources":["api/genre.ts"],"names":[],"mappings":";;AAAA,qCAAgC;AAChC,+BAAiC;AAIjC,mCAA2C;AAE3C,6CAAyE;AAE5D,QAAA,QAAQ,GAAG,gBAAM,EAAE,CAAC,GAAG,CAChC,QAAQ,EACR,gBAAM,EAAE;KACH,GAAG,CAAC,GAAG,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,CAClC,yBAAiB,CACb,KAAK,IAAI,EAAE;IACP,MAAM,MAAM,GAAG,MAAM,uBAAe,CAAC,IAAI,EAAE,CAAA;IAE3C,OAAuB;QACnB,MAAM,EAAE,MAAM,CAAC,GAAG,CAAC,kBAAU,CAAC;KACjC,CAAA;AACL,CAAC,EACD,OAAO,EACP,QAAQ,CACX,CACJ;KACA,GAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,CACrC,yBAAiB,CACb,KAAK,EAAE,GAAc,EAAE,EAAE;IACrB,MAAM,KAAK,GAAG,gBAAQ,CAAC,GAAG,EAAE,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;IAE9C,OAA6B;QACzB,KAAK,EAAE,kBAAU,CAAC,KAAK,CAAC;QACxB,MAAM,EAAE,MAAM,uBAAe,CAAC,iBAAiB,CAAC,KAAK,CAAC;KACzD,CAAA;AACL,CAAC,EACD,OAAO,EACP,QAAQ,CACX,CACJ;KACA,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,CACnC,yBAAiB,CACb,KAAK,EAAE,GAAc,EAAE,EAAE;IACrB,MAAM,KAAK,GAAG,gBAAQ,CAAC,GAAG,EAAE,SAAI,EAAE,CAAC,CAAA;IAEnC,OAA6B;QACzB,KAAK,EAAE,kBAAU,CAAC,KAAK,CAAC;QACxB,MAAM,EAAE,MAAM,uBAAe,CAAC,SAAS,CAAC,KAAK,CAAC;KACjD,CAAA;AACL,CAAC,EACD,OAAO,EACP,QAAQ,CACX,CACJ,CACR,CAAA","file":"genre.js","sourcesContent":["import { Router } from 'express'\nimport { v4 as uuid } from 'uuid'\n\nimport { IGenreResponse, INewGenre, IUpdateGenreResponse } from 'movie-db-api'\n\nimport { processApiRequest } from './utils'\n\nimport { genreCollection, toEntity, toProtocol } from '../database/genre'\n\nexport const genreApi = Router().use(\n    '/genre',\n    Router()\n        .get('/', (request, response, next) =>\n            processApiRequest(\n                async () => {\n                    const genres = await genreCollection.find()\n\n                    return <IGenreResponse>{\n                        genres: genres.map(toProtocol),\n                    }\n                },\n                request,\n                response,\n            ),\n        )\n        .put('/:id', (request, response, next) =>\n            processApiRequest(\n                async (req: INewGenre) => {\n                    const genre = toEntity(req, request.params.id)\n\n                    return <IUpdateGenreResponse>{\n                        genre: toProtocol(genre),\n                        errors: await genreCollection.findOneAndReplace(genre),\n                    }\n                },\n                request,\n                response,\n            ),\n        )\n        .post('/', (request, response, next) =>\n            processApiRequest(\n                async (req: INewGenre) => {\n                    const genre = toEntity(req, uuid())\n\n                    return <IUpdateGenreResponse>{\n                        genre: toProtocol(genre),\n                        errors: await genreCollection.insertOne(genre),\n                    }\n                },\n                request,\n                response,\n            ),\n        ),\n)\n"],"sourceRoot":"/home/jochenmanns/Software/git/MovieDBNode/Server/src"}
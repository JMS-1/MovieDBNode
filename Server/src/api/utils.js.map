{"version":3,"sources":["api/utils.ts"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["import { Request, Response, Router } from 'express'\nimport { v4 as uuid } from 'uuid'\n\nimport * as movieDbApi from 'movie-db-api'\n\nimport { apiError, getError } from '../utils'\n\nexport function processApiRequest<TResponse, TRequest = {}>(\n    processor: (body?: TRequest) => TResponse | Promise<TResponse>,\n    request: Request,\n    response: Response,\n): void {\n    function onError(error: any): void {\n        const message = getError(error)\n\n        try {\n            response.write(message)\n            response.sendStatus(400)\n        } catch (error) {\n            apiError('unable to process %s: %s', request.originalUrl, message)\n        }\n    }\n\n    try {\n        const result = processor(request.body)\n        const promise = result instanceof Promise ? result : Promise.resolve(result)\n\n        promise\n            .then(data => {\n                try {\n                    response.header('Cache-Control', 'private, no-cache, no-store, must-revalidate').json(data)\n                } catch (error) {\n                    onError(error)\n                }\n            }, onError)\n            .catch(onError)\n    } catch (error) {\n        onError(error)\n    }\n}\n\ninterface IApiCollection<TDbItem> {\n    deleteOne(id: string): Promise<movieDbApi.IValidationError[]>\n    find(): Promise<TDbItem[]>\n    findOneAndReplace(item: TDbItem): Promise<movieDbApi.IValidationError[]>\n    insertOne(item: TDbItem): Promise<movieDbApi.IValidationError[]>\n}\n\nclass Api<TNewItem, TFullItem extends movieDbApi.TItem<TNewItem>, TDbItem> {\n    constructor(\n        private readonly _path: string,\n        private readonly _db: IApiCollection<TDbItem>,\n        private readonly _toProtocol: (dbItem: TDbItem) => TFullItem,\n        private readonly _toEntity: (item: TNewItem, id: string) => TDbItem,\n    ) {}\n\n    private readonly query = async (): Promise<movieDbApi.IApiQueryResponse<TFullItem>> => {\n        const list = await this._db.find()\n\n        return <movieDbApi.IApiQueryResponse<TFullItem>>{\n            list: list.map(this._toProtocol),\n        }\n    }\n\n    private readonly create = async (item: TNewItem): Promise<movieDbApi.IApiUpdateResponse<TFullItem>> => {\n        const dbItem = this._toEntity(item, uuid())\n\n        return <movieDbApi.IApiUpdateResponse<TFullItem>>{\n            item: this._toProtocol(dbItem),\n            errors: await this._db.insertOne(dbItem),\n        }\n    }\n\n    private readonly update = async (item: TNewItem, id: string): Promise<movieDbApi.IApiUpdateResponse<TFullItem>> => {\n        const dbItem = this._toEntity(item, id)\n\n        return <movieDbApi.IApiUpdateResponse<TFullItem>>{\n            item: this._toProtocol(dbItem),\n            errors: await this._db.findOneAndReplace(dbItem),\n        }\n    }\n\n    private readonly remove = async (id: string): Promise<movieDbApi.IApiDeleteResponse> => {\n        return <movieDbApi.IApiDeleteResponse>{\n            id,\n            errors: await this._db.deleteOne(id),\n        }\n    }\n\n    createRouter(): Router {\n        return Router().use(\n            this._path,\n            Router()\n                .delete('/:id', (req, res) => processApiRequest(() => this.remove(req.params.id), req, res))\n                .get('/', (req, res) => processApiRequest(this.query, req, res))\n                .post('/', (req, res) => processApiRequest(this.create, req, res))\n                .put('/:id', (req, res) => processApiRequest((i: TNewItem) => this.update(i, req.params.id), req, res)),\n        )\n    }\n}\n\nexport function createApiRouter<TNewItem, TFullItem extends movieDbApi.TItem<TNewItem>, TDbItem>(\n    path: string,\n    db: IApiCollection<TDbItem>,\n    toProtocol: (dbItem: TDbItem) => TFullItem,\n    toEntity: (item: TNewItem, id: string) => TDbItem,\n): Router {\n    const api = new Api(path, db, toProtocol, toEntity)\n\n    return api.createRouter()\n}\n"],"sourceRoot":"/home/jochenmanns/Software/git/MovieDBNode/Server/src"}
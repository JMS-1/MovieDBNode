{"version":3,"sources":["api/recording.ts"],"names":[],"mappings":";;AAAA,qCAAgC;AAIhC,mCAA2C;AAE3C,qDAAiF;AAEpE,QAAA,YAAY,GAAG,gBAAM,EAAE,CAAC,GAAG,CACpC,YAAY,EACZ,gBAAM,EAAE;KACH,GAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,CACrC,yBAAiB,CACb,KAAK,IAAI,EAAE,CAAC,sBAAU,CAAC,MAAM,+BAAmB,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAC5E,OAAO,EACP,QAAQ,CACX,CACJ;KACA,IAAI,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,CACzC,yBAAiB,CACb,KAAK,EAAE,GAA2B,EAAE,EAAE,CAAC,MAAM,+BAAmB,CAAC,KAAK,CAAC,GAAG,CAAC,EAC3E,OAAO,EACP,QAAQ,CACX,CACJ;KACA,GAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,CACrC,yBAAiB,CACb,KAAK,EAAE,GAAkB,EAAE,EAAE;IACzB,MAAM,SAAS,GAAG,oBAAQ,CAAC,GAAG,EAAE,OAAO,CAAC,MAAM,CAAC,EAAE,EAAE,SAAS,CAAC,CAAA;IAE7D,OAAiC;QAC7B,SAAS,EAAE,sBAAU,CAAC,SAAS,CAAC;QAChC,MAAM,EAAE,MAAM,+BAAmB,CAAC,iBAAiB,CAAC,SAAS,CAAC;KACjE,CAAA;AACL,CAAC,EACD,OAAO,EACP,QAAQ,CACX,CACJ,CACR,CAAA","file":"recording.js","sourcesContent":["import { Router } from 'express'\n\nimport { INewRecording, IRecordingQueryRequest, IUpdateRecordingResponse } from 'movie-db-api'\n\nimport { processApiRequest } from './utils'\n\nimport { recordingCollection, toEntity, toProtocol } from '../database/recording'\n\nexport const recordingApi = Router().use(\n    '/recording',\n    Router()\n        .get('/:id', (request, response, next) =>\n            processApiRequest(\n                async () => toProtocol(await recordingCollection.findOne(request.params.id)),\n                request,\n                response,\n            ),\n        )\n        .post('/search', (request, response, next) =>\n            processApiRequest(\n                async (req: IRecordingQueryRequest) => await recordingCollection.query(req),\n                request,\n                response,\n            ),\n        )\n        .put('/:id', (request, response, next) =>\n            processApiRequest(\n                async (req: INewRecording) => {\n                    const recording = toEntity(req, request.params.id, undefined)\n\n                    return <IUpdateRecordingResponse>{\n                        recording: toProtocol(recording),\n                        errors: await recordingCollection.findOneAndReplace(recording),\n                    }\n                },\n                request,\n                response,\n            ),\n        ),\n)\n"],"sourceRoot":"/home/jochenmanns/Software/git/MovieDBNode/Server/src"}
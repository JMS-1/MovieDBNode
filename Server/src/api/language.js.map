{"version":3,"sources":["api/language.ts"],"names":[],"mappings":";;AAAA,qCAAgC;AAChC,+BAAiC;AAIjC,mCAA2C;AAE3C,mDAA+E;AAElE,QAAA,WAAW,GAAG,gBAAM,EAAE,CAAC,GAAG,CACnC,WAAW,EACX,gBAAM,EAAE;KACH,GAAG,CAAC,GAAG,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,CAClC,yBAAiB,CACb,KAAK,IAAI,EAAE;IACP,MAAM,SAAS,GAAG,MAAM,6BAAkB,CAAC,IAAI,EAAE,CAAA;IAEjD,OAA0B;QACtB,SAAS,EAAE,SAAS,CAAC,GAAG,CAAC,qBAAU,CAAC;KACvC,CAAA;AACL,CAAC,EACD,OAAO,EACP,QAAQ,CACX,CACJ;KACA,GAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,CACrC,yBAAiB,CACb,KAAK,EAAE,GAAiB,EAAE,EAAE;IACxB,MAAM,QAAQ,GAAG,mBAAQ,CAAC,GAAG,EAAE,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;IAEjD,OAAgC;QAC5B,QAAQ,EAAE,qBAAU,CAAC,QAAQ,CAAC;QAC9B,MAAM,EAAE,MAAM,6BAAkB,CAAC,iBAAiB,CAAC,QAAQ,CAAC;KAC/D,CAAA;AACL,CAAC,EACD,OAAO,EACP,QAAQ,CACX,CACJ;KACA,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,CACnC,yBAAiB,CACb,KAAK,EAAE,GAAiB,EAAE,EAAE;IACxB,MAAM,QAAQ,GAAG,mBAAQ,CAAC,GAAG,EAAE,SAAI,EAAE,CAAC,CAAA;IAEtC,OAAgC;QAC5B,QAAQ,EAAE,qBAAU,CAAC,QAAQ,CAAC;QAC9B,MAAM,EAAE,MAAM,6BAAkB,CAAC,SAAS,CAAC,QAAQ,CAAC;KACvD,CAAA;AACL,CAAC,EACD,OAAO,EACP,QAAQ,CACX,CACJ,CACR,CAAA","file":"language.js","sourcesContent":["import { Router } from 'express'\nimport { v4 as uuid } from 'uuid'\n\nimport { ILanguageResponse, INewLanguage, IUpdateLanguageResponse } from 'movie-db-api'\n\nimport { processApiRequest } from './utils'\n\nimport { languageCollection, toEntity, toProtocol } from '../database/language'\n\nexport const languageApi = Router().use(\n    '/language',\n    Router()\n        .get('/', (request, response, next) =>\n            processApiRequest(\n                async () => {\n                    const languages = await languageCollection.find()\n\n                    return <ILanguageResponse>{\n                        languages: languages.map(toProtocol),\n                    }\n                },\n                request,\n                response,\n            ),\n        )\n        .put('/:id', (request, response, next) =>\n            processApiRequest(\n                async (req: INewLanguage) => {\n                    const language = toEntity(req, request.params.id)\n\n                    return <IUpdateLanguageResponse>{\n                        language: toProtocol(language),\n                        errors: await languageCollection.findOneAndReplace(language),\n                    }\n                },\n                request,\n                response,\n            ),\n        )\n        .post('/', (request, response, next) =>\n            processApiRequest(\n                async (req: INewLanguage) => {\n                    const language = toEntity(req, uuid())\n\n                    return <IUpdateLanguageResponse>{\n                        language: toProtocol(language),\n                        errors: await languageCollection.insertOne(language),\n                    }\n                },\n                request,\n                response,\n            ),\n        ),\n)\n"],"sourceRoot":"/home/jochenmanns/Software/git/MovieDBNode/Server/src"}
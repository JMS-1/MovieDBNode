{"version":3,"sources":["database/genre.ts"],"names":[],"mappings":";;;;;AAAA,4CAAwE;AACxE,2CAAiD;AACjD,mCAAwC;AACxC,6CAAuC;AAEvC,sCAAgC;AAEnB,QAAA,eAAe,GAAG,IAAI,CAAC,KAAM,SAAQ,sBAAwB;IAAtC;;QACvB,SAAI,GAAG,sBAAc,CAAA;QAErB,WAAM,GAAG,mBAAW,CAAA;IAoBjC,CAAC;IAlBG,OAAO,CAAC,GAAQ;QACZ,MAAM,KAAK,GAAa;YACpB,GAAG,EAAE,GAAG,CAAC,EAAE;YACX,IAAI,EAAE,GAAG,CAAC,IAAI,IAAI,EAAE;SACvB,CAAA;QAED,MAAM,MAAM,GAAG,qBAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;QAE3C,IAAI,MAAM,EAAE;YACR,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAA;SAC1C;QAED,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAA;IAC7B,CAAC;IAES,KAAK,CAAC,SAAS,CAAC,EAAU;QAChC,OAAO,+BAAmB,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,EAAE,WAAW,CAAC,CAAA;IAC/D,CAAC;CACJ,CAAC,EAAE,CAAA","file":"genre.js","sourcesContent":["import { collectionName, GenreSchema, IDbGenre } from './entities/genre'\nimport { recordingCollection } from './recording'\nimport { CollectionBase } from './utils'\nimport { validate } from './validation'\n\nexport * from './entities/genre'\n\nexport const genreCollection = new (class extends CollectionBase<IDbGenre> {\n    readonly name = collectionName\n\n    readonly schema = GenreSchema\n\n    fromSql(sql: any): void {\n        const genre: IDbGenre = {\n            _id: sql.Id,\n            name: sql.Long || '',\n        }\n\n        const errors = validate(genre, this.schema)\n\n        if (errors) {\n            throw new Error(JSON.stringify(errors))\n        }\n\n        this.cacheMigrated(genre)\n    }\n\n    protected async canDelete(id: string): Promise<string> {\n        return recordingCollection.inUse('genres', id, 'Kategorie')\n    }\n})()\n"],"sourceRoot":"/home/jochenmanns/Software/git/MovieDBNode/Server/src"}
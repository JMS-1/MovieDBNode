{"version":3,"sources":["database/entities/container.ts"],"names":[],"mappings":";;AAEA,mCAAkC;AAErB,QAAA,cAAc,GAAG,YAAY,CAAA;AAI7B,QAAA,eAAe,GAAG;IAC3B,OAAO,EAAE,gCAAgC;IACzC,GAAG,EAAE,sDAAsD;IAC3D,oBAAoB,EAAE,KAAK;IAC3B,IAAI,EAAE,QAAQ;IACd,OAAO,EAAE,sBAAsB;IAC/B,UAAU,EAAE;QACR,GAAG,EAAE;YACD,OAAO,EAAE,4CAA4C;YACrD,OAAO,EAAE,gBAAQ;YACjB,IAAI,EAAE,QAAQ;SACjB;QACD,WAAW,EAAE;YACT,SAAS,EAAE,IAAI;YACf,OAAO,EAAE,0BAA0B;YACnC,IAAI,EAAE,QAAQ;SACjB;QACD,IAAI,EAAE;YACF,SAAS,EAAE,EAAE;YACb,OAAO,EAAE,mCAAmC;YAC5C,SAAS,EAAE,CAAC;YACZ,IAAI,EAAE,QAAQ;SACjB;QACD,QAAQ,EAAE;YACN,OAAO,EAAE,+BAA+B;YACxC,OAAO,EAAE,gBAAQ;YACjB,IAAI,EAAE,QAAQ;SACjB;QACD,cAAc,EAAE;YACZ,SAAS,EAAE,GAAG;YACd,OAAO,EAAE,2BAA2B;YACpC,IAAI,EAAE,QAAQ;SACjB;QACD,IAAI,EAAE;YACF,OAAO,EAAE,qCAAqC;YAC9C,IAAI,EAAE,SAAS;YACf,IAAI,EAAE;;;;;;;aAOL;SACJ;KACJ;IACD,QAAQ,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC;CACpC,CAAA;AAED,SAAgB,UAAU,CAAC,SAAuB;IAC9C,OAAO,SAAS,CAAA;AACpB,CAAC;AAFD,gCAEC;AAED,SAAgB,QAAQ,CAAC,SAAwB,EAAE,EAAU;IACzD,MAAM,WAAW,GAAiB;QAC9B,GAAG,EAAE,EAAE;QACP,IAAI,EAAE,SAAS,CAAC,IAAI;QACpB,IAAI,EAAE,SAAS,CAAC,IAAI;KACvB,CAAA;IAED,IAAI,SAAS,CAAC,WAAW,KAAK,SAAS,EAAE;QACrC,WAAW,CAAC,WAAW,GAAG,SAAS,CAAC,WAAW,CAAA;KAClD;IAED,IAAI,SAAS,CAAC,QAAQ,KAAK,SAAS,EAAE;QAClC,WAAW,CAAC,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAA;KAC5C;IAED,IAAI,SAAS,CAAC,cAAc,KAAK,SAAS,EAAE;QACxC,WAAW,CAAC,cAAc,GAAG,SAAS,CAAC,cAAc,CAAA;KACxD;IAED,OAAO,WAAW,CAAA;AACtB,CAAC;AApBD,4BAoBC","file":"container.js","sourcesContent":["import { containerType, IContainer, INewContainer } from 'movie-db-api'\n\nimport { uniqueId } from './utils'\n\nexport const collectionName = 'containers'\n\nexport interface IDbContainer extends IContainer {}\n\nexport const ContainerSchema = {\n    $schema: 'http://json-schema.org/schema#',\n    $id: 'http://psimarron.net/schemas/movie-db/container.json',\n    additionalProperties: false,\n    type: 'object',\n    message: 'Ablage unvollständig',\n    properties: {\n        _id: {\n            message: 'Eindeutige Kennung fehlt oder ist ungültig',\n            pattern: uniqueId,\n            type: 'string',\n        },\n        description: {\n            maxLength: 2000,\n            message: 'Beschreibung ist zu lang',\n            type: 'string',\n        },\n        name: {\n            maxLength: 50,\n            message: 'Name nicht angegeben oder zu lang',\n            minLength: 1,\n            type: 'string',\n        },\n        parentId: {\n            message: 'Übergeordnete Ablage ungültig',\n            pattern: uniqueId,\n            type: 'string',\n        },\n        parentLocation: {\n            maxLength: 100,\n            message: 'Ablagebezeichnung zu lang',\n            type: 'string',\n        },\n        type: {\n            message: 'Ablageart fehlt oder ist unzulässig',\n            type: 'integer',\n            enum: [\n                containerType.Box,\n                containerType.Disk,\n                containerType.FeatureSet,\n                containerType.Folder,\n                containerType.Shelf,\n                containerType.Undefined,\n            ],\n        },\n    },\n    required: ['_id', 'name', 'type'],\n}\n\nexport function toProtocol(container: IDbContainer): IContainer {\n    return container\n}\n\nexport function toEntity(container: INewContainer, id: string): IDbContainer {\n    const dbContainer: IDbContainer = {\n        _id: id,\n        name: container.name,\n        type: container.type,\n    }\n\n    if (container.description !== undefined) {\n        dbContainer.description = container.description\n    }\n\n    if (container.parentId !== undefined) {\n        dbContainer.parentId = container.parentId\n    }\n\n    if (container.parentLocation !== undefined) {\n        dbContainer.parentLocation = container.parentLocation\n    }\n\n    return dbContainer\n}\n"],"sourceRoot":"/home/jochenmanns/Software/git/MovieDBNode/Server/src"}
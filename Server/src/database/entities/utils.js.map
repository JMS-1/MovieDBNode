{"version":3,"sources":["database/entities/utils.ts"],"names":[],"mappings":";;AAAa,QAAA,QAAQ,GAAG,+EAA+E,CAAA","file":"utils.js","sourcesContent":["export const uniqueId = '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'\n\ntype KeysOf<T> = keyof T\n\nexport interface IFieldSchemaCommon {\n    message?: string\n}\n\nexport interface IObjectFieldSchema<TEntity> extends IFieldSchemaCommon {\n    additionalProperties?: boolean\n    properties: Required<{ [TField in KeysOf<TEntity>]: TFieldSchema<TEntity> }>\n    required: KeysOf<TEntity>[]\n    type: 'object'\n}\n\nexport interface IStringArrayFieldSchema extends IFieldSchemaCommon {\n    items: IStringFieldSchema\n    type: 'array'\n    uniqueItems?: boolean\n}\n\nexport interface IObjectArrayFieldSchema extends IFieldSchemaCommon {\n    items: IObjectFieldSchema<any>\n    type: 'array'\n    uniqueItems?: boolean\n}\n\nexport interface IStringFieldSchema extends IFieldSchemaCommon {\n    maxLength?: number\n    minLength?: number\n    pattern?: string\n    type: 'string'\n}\n\nexport interface IIntegerFieldSchema extends IFieldSchemaCommon {\n    enum?: number[]\n    minimum?: number\n    type: 'integer'\n}\n\nexport type TFieldSchema<TEntity> =\n    | IIntegerFieldSchema\n    | IObjectArrayFieldSchema\n    | IObjectFieldSchema<TEntity>\n    | IStringArrayFieldSchema\n    | IStringFieldSchema\n\nexport interface ISchema<TEntity> extends IObjectFieldSchema<TEntity> {\n    $id: string\n    $schema: 'http://json-schema.org/schema#'\n}\n"],"sourceRoot":"/home/jochenmanns/Software/git/MovieDBNode/Server/src"}
{"version":3,"sources":["database/entities/recording.ts"],"names":[],"mappings":"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","file":"recording.js","sourcesContent":["import { url } from 'inspector'\n\nimport { INewRecording, IRecording, IRecordingLink, mediaType } from 'movie-db-api'\n\nimport { IObjectFieldSchema, ISchema, isoDate, uniqueId } from './utils'\n\nexport const collectionName = 'recordings'\n\nexport interface IDbLink extends IRecordingLink {}\n\nexport interface IDbRecording extends IRecording {}\n\nconst LinkSubSchema: IObjectFieldSchema<IDbLink> = {\n    type: 'object',\n    message: 'Verweis unvollständig',\n    properties: {\n        description: {\n            maxLength: 2000,\n            message: 'Beschreibung ist zu lang',\n            type: 'string',\n        },\n        name: {\n            maxLength: 100,\n            message: 'Name nicht angegeben oder zu lang',\n            minLength: 1,\n            type: 'string',\n        },\n        url: {\n            maxLength: 2000,\n            message: 'Verweis ist zu lang',\n            type: 'string',\n        },\n    },\n    required: ['name', 'url'],\n}\n\nexport const RecordingSchema: ISchema<IDbRecording> = {\n    $schema: 'http://json-schema.org/schema#',\n    $id: 'http://psimarron.net/schemas/movie-db/recording.json',\n    additionalProperties: false,\n    type: 'object',\n    message: 'Aufzeichnung unvollständig',\n    properties: {\n        _id: {\n            message: 'Eindeutige Kennung fehlt oder ist ungültig',\n            pattern: uniqueId,\n            type: 'string',\n        },\n        created: {\n            message: 'Zeitpunkt fehlt oder ist ungültig',\n            pattern: isoDate,\n            type: 'string',\n        },\n        description: {\n            maxLength: 2000,\n            message: 'Beschreibung ist zu lang',\n            type: 'string',\n        },\n        genres: {\n            items: {\n                message: 'Genre ist ungültig',\n                pattern: uniqueId,\n                type: 'string',\n            },\n            message: 'Genres sind ungültig',\n            type: 'array',\n            uniqueItems: true,\n        },\n        languages: {\n            items: {\n                message: 'Sprache ist ungültig',\n                pattern: uniqueId,\n                type: 'string',\n            },\n            message: 'Sprachen sind ungültig',\n            type: 'array',\n            uniqueItems: true,\n        },\n        links: {\n            items: LinkSubSchema,\n            message: 'Verweise sind ungültig',\n            type: 'array',\n        },\n        name: {\n            maxLength: 200,\n            message: 'Name nicht angegeben oder zu lang',\n            minLength: 1,\n            type: 'string',\n        },\n        rentTo: {\n            maxLength: 200,\n            message: 'Verleiher zu lang',\n            type: 'string',\n        },\n        series: {\n            message: 'Serie ist ungültig',\n            pattern: uniqueId,\n            type: 'string',\n        },\n        containerId: {\n            message: 'Ablage ist ungültig',\n            pattern: uniqueId,\n            type: 'string',\n        },\n        containerPosition: {\n            maxLength: 100,\n            message: 'Standort zu lang',\n            type: 'string',\n        },\n        containerType: {\n            message: 'Medienart fehlt oder ist unzulässig',\n            type: 'integer',\n            enum: [\n                mediaType.BluRay,\n                mediaType.DVD,\n                mediaType.RecordedDVD,\n                mediaType.SuperVideoCD,\n                mediaType.Undefined,\n                mediaType.VideoCD,\n            ],\n        },\n    },\n    required: ['_id', 'name', 'created', 'genres', 'languages', 'links', 'containerType'],\n}\n\nfunction linkToProtocol(link: IDbLink): IRecordingLink {\n    return link\n}\n\nfunction linkToEntity(link: IRecordingLink): IDbLink {\n    const dbLink: IDbLink = {\n        name: link.name,\n        url: url.name,\n    }\n\n    if (link.description) {\n        dbLink.description = link.description\n    }\n\n    return dbLink\n}\n\nexport function toProtocol(recording: IDbRecording): IRecording {\n    return { ...recording, links: (recording.links || []).map(linkToProtocol) }\n}\n\nexport function toEntity(recording: INewRecording, id: string, created: string): IDbRecording {\n    const dbRecording: IDbRecording = {\n        _id: id,\n        containerType: recording.containerType,\n        created,\n        genres: recording.genres || [],\n        languages: recording.languages || [],\n        links: (recording.links || []).map(linkToEntity),\n        name: recording.name,\n    }\n\n    if (recording.description) {\n        dbRecording.description = recording.description\n    }\n\n    if (recording.containerId) {\n        dbRecording.containerId = recording.containerId\n    }\n\n    if (recording.containerPosition) {\n        dbRecording.containerPosition = recording.containerPosition\n    }\n\n    if (recording.rentTo) {\n        dbRecording.rentTo = recording.rentTo\n    }\n\n    if (recording.series) {\n        dbRecording.series = recording.series\n    }\n\n    return dbRecording\n}\n"],"sourceRoot":"/home/jochenmanns/Software/git/MovieDBNode/Server/src"}
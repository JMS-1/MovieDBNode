{"version":3,"sources":["database/recording.ts"],"names":[],"mappings":"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","file":"recording.js","sourcesContent":["import * as debug from 'debug'\nimport { FilterQuery } from 'mongodb'\n\nimport * as api from 'movie-db-api'\n\nimport { collectionName, IDbRecording, RecordingSchema } from './entities/recording'\nimport { CollectionBase } from './utils'\nimport { validate } from './validation'\n\nexport * from './entities/recording'\n\nconst databaseTrace = debug('database:trace')\nconst dateReg = /^CAST\\(N'([^\\.]+)(\\.\\d+)?' AS DateTime\\)$/\n\ninterface IAggregateCount {\n    total: number\n}\n\ninterface IAggregationResult {\n    count: IAggregateCount[]\n    languages: api.IQueryCountInfo[]\n    genres: api.IQueryCountInfo[]\n    view: api.IRecordingInfo[]\n}\n\nconst escapeReg = /[.*+?^${}()|[\\]\\\\]/g\n\nexport const recordingCollection = new (class extends CollectionBase<IDbRecording> {\n    readonly name = collectionName\n\n    readonly schema = RecordingSchema\n\n    fromSql(sql: any): void {\n        const date = dateReg.exec(sql.Created)\n\n        const recording: IDbRecording = {\n            _id: sql.Id,\n            created: (date && `${date[1]}Z`) || sql.Created,\n            genres: [],\n            languages: [],\n            links: [],\n            media: sql.Media,\n            name: sql.Name,\n        }\n\n        if (sql.Description) {\n            recording.description = sql.Description\n        }\n\n        if (sql.RentTo) {\n            recording.rentTo = sql.RentTo\n        }\n\n        if (sql.Series) {\n            recording.series = sql.Series\n        }\n\n        const errors = validate(recording, this.schema)\n\n        if (errors) {\n            throw new Error(JSON.stringify(errors))\n        }\n\n        this.cacheMigrated(recording)\n    }\n\n    async query(req: api.IRecordingQueryRequest): Promise<api.IRecordingQueryResponse> {\n        const filter: FilterQuery<IDbRecording> = {}\n\n        if (req.language) {\n            filter.languages = req.language.toString()\n        }\n\n        if (req.genres && req.genres.length > 0) {\n            filter.genres = { $all: req.genres.map(s => s.toString()) }\n        }\n\n        if (req.series && req.series.length > 0) {\n            filter.series = { $in: req.series.map(s => s.toString()) }\n        }\n\n        if (typeof req.rent === 'boolean') {\n            filter.rentTo = { $exists: req.rent }\n        }\n\n        const query: any[] = [\n            { $match: filter },\n            {\n                $graphLookup: {\n                    as: 'hierarchy',\n                    connectFromField: 'parentId',\n                    connectToField: '_id',\n                    from: 'series',\n                    startWith: '$series',\n                },\n            },\n            {\n                $project: {\n                    _id: 1,\n                    created: 1,\n                    description: 1,\n                    fullName: {\n                        $reduce: {\n                            in: { $concat: ['$$this.name', ' > ', '$$value'] },\n                            initialValue: '$name',\n                            input: { $reverseArray: '$hierarchy' },\n                        },\n                    },\n                    genres: 1,\n                    languages: 1,\n                    links: 1,\n                    media: 1,\n                    name: 1,\n                    rentTo: 1,\n                    series: 1,\n                },\n            },\n        ]\n\n        if (req.fullName) {\n            query.push({\n                $match: { fullName: { $regex: req.fullName.toString().replace(escapeReg, '\\\\$&'), $options: 'i' } },\n            })\n        }\n\n        query.push({\n            $facet: {\n                count: [{ $count: 'total' }],\n                languages: [{ $unwind: '$languages' }, { $group: { _id: '$languages', count: { $sum: 1 } } }],\n                genres: [{ $unwind: '$genres' }, { $group: { _id: '$genres', count: { $sum: 1 } } }],\n                view: [\n                    { $sort: { [req.sort.toString()]: req.sortOrder === 'ascending' ? +1 : -1 } },\n                    { $skip: 1 * req.firstPage * req.pageSize },\n                    { $limit: 1 * req.pageSize },\n                ],\n            },\n        })\n\n        databaseTrace('query recordings: %j', query)\n\n        const me = await this.getCollection()\n        const result = await me.aggregate<IAggregationResult>(query).toArray()\n\n        const firstRes = result && result[0]\n        const countRes = firstRes && firstRes.count && firstRes.count[0]\n\n        return {\n            correlationId: req.correlationId,\n            count: (countRes && countRes.total) || 0,\n            genres: (firstRes && firstRes.genres) || [],\n            languages: (firstRes && firstRes.languages) || [],\n            total: await me.countDocuments(),\n            view: (firstRes && firstRes.view) || [],\n        }\n    }\n})()\n"],"sourceRoot":"/home/jochenmanns/Software/git/MovieDBNode/Server/src"}
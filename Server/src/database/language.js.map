{"version":3,"sources":["database/language.ts"],"names":[],"mappings":";;;;;AAAA,kDAAiF;AACjF,mCAAwC;AACxC,6CAAuC;AAEvC,yCAAmC;AAEtB,QAAA,kBAAkB,GAAG,IAAI,CAAC,KAAM,SAAQ,sBAA2B;IAAzC;;QAC1B,SAAI,GAAG,yBAAc,CAAA;QAErB,WAAM,GAAG,yBAAc,CAAA;IAgBpC,CAAC;IAdG,OAAO,CAAC,GAAQ;QACZ,MAAM,QAAQ,GAAgB;YAC1B,GAAG,EAAE,GAAG,CAAC,EAAE;YACX,IAAI,EAAE,GAAG,CAAC,IAAI,IAAI,EAAE;SACvB,CAAA;QAED,MAAM,MAAM,GAAG,qBAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;QAE9C,IAAI,MAAM,EAAE;YACR,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAA;SAC1C;QAED,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAA;IAChC,CAAC;CACJ,CAAC,EAAE,CAAA","file":"language.js","sourcesContent":["import { collectionName, IDbLanguage, LanguageSchema } from './entities/language'\nimport { CollectionBase } from './utils'\nimport { validate } from './validation'\n\nexport * from './entities/language'\n\nexport const languageCollection = new (class extends CollectionBase<IDbLanguage> {\n    readonly name = collectionName\n\n    readonly schema = LanguageSchema\n\n    fromSql(sql: any): void {\n        const language: IDbLanguage = {\n            _id: sql.Id,\n            name: sql.Long || '',\n        }\n\n        const errors = validate(language, this.schema)\n\n        if (errors) {\n            throw new Error(JSON.stringify(errors))\n        }\n\n        this.cacheMigrated(language)\n    }\n})()\n"],"sourceRoot":"/home/jochenmanns/Software/git/MovieDBNode/Server/src"}
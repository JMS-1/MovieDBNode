{"version":3,"sources":["migration/media.ts"],"names":[],"mappings":";;AAEA,sDAA8D;AAC9D,6CAAkD;AAClD,uDAAiD;AASjD,MAAM,kBAAkB,GAA2B;IAC/C,OAAO,EAAE,gCAAgC;IACzC,GAAG,EAAE,0DAA0D;IAC/D,oBAAoB,EAAE,KAAK;IAC3B,IAAI,EAAE,QAAQ;IACd,OAAO,EAAE,sBAAsB;IAC/B,UAAU,EAAE;QACR,GAAG,EAAE;YACD,OAAO,EAAE,4CAA4C;YACrD,OAAO,EAAE,gBAAQ;YACjB,IAAI,EAAE,QAAQ;SACjB;QACD,WAAW,EAAE;YACT,OAAO,EAAE,qBAAqB;YAC9B,OAAO,EAAE,gBAAQ;YACjB,IAAI,EAAE,QAAQ;SACjB;QACD,QAAQ,EAAE;YACN,SAAS,EAAE,GAAG;YACd,OAAO,EAAE,kBAAkB;YAC3B,IAAI,EAAE,QAAQ;SACjB;QACD,IAAI,EAAE;YACF,OAAO,EAAE,qCAAqC;YAC9C,IAAI,EAAE,SAAS;YACf,IAAI,EAAE;;;;;;;aAOL;SACJ;KACJ;IACD,QAAQ,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC;CAC5B,CAAA;AAEY,QAAA,eAAe,GAAG,IAAI,CAAC,KAAM,SAAQ,sBAA6B;IAA3C;;QACvB,SAAI,GAAG,KAAK,CAAA;QAEZ,WAAM,GAAG,kBAAkB,CAAA;IA4BxC,CAAC;IA1BG,OAAO,CAAC,GAAQ;QACZ,MAAM,KAAK,GAAkB;YACzB,GAAG,EAAE,GAAG,CAAC,EAAE;YACX,IAAI,EAAE,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC;SAC/B,CAAA;QAED,IAAI,GAAG,CAAC,SAAS,EAAE;YACf,KAAK,CAAC,WAAW,GAAG,GAAG,CAAC,SAAS,CAAA;SACpC;QAED,IAAI,GAAG,CAAC,QAAQ,EAAE;YACd,KAAK,CAAC,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAA;SAChC;QAED,MAAM,MAAM,GAAG,qBAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;QAE3C,IAAI,MAAM,EAAE;YACR,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAA;SAC1C;QAED,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAA;IAC7B,CAAC;IAED,OAAO;QACH,OAAO,OAAO,CAAC,OAAO,CAAO,SAAS,CAAC,CAAA;IAC3C,CAAC;CACJ,CAAC,EAAE,CAAA","file":"media.js","sourcesContent":["import { mediaType } from 'movie-db-api'\n\nimport { ISchema, uniqueId } from '../database/entities/utils'\nimport { CollectionBase } from '../database/utils'\nimport { validate } from '../database/validation'\n\nexport interface IMigrateMedia {\n    _id: string\n    containerId?: string\n    position?: string\n    type: mediaType\n}\n\nconst MigrateMediaSchema: ISchema<IMigrateMedia> = {\n    $schema: 'http://json-schema.org/schema#',\n    $id: 'http://psimarron.net/schemas/movie-db/migrate/media.json',\n    additionalProperties: false,\n    type: 'object',\n    message: 'Medium unvollst채ndig',\n    properties: {\n        _id: {\n            message: 'Eindeutige Kennung fehlt oder ist ung체ltig',\n            pattern: uniqueId,\n            type: 'string',\n        },\n        containerId: {\n            message: 'Ablage ist ung체ltig',\n            pattern: uniqueId,\n            type: 'string',\n        },\n        position: {\n            maxLength: 100,\n            message: 'Standort zu lang',\n            type: 'string',\n        },\n        type: {\n            message: 'Medienart fehlt oder ist unzul채ssig',\n            type: 'integer',\n            enum: [\n                mediaType.BluRay,\n                mediaType.DVD,\n                mediaType.RecordedDVD,\n                mediaType.SuperVideoCD,\n                mediaType.Undefined,\n                mediaType.VideoCD,\n            ],\n        },\n    },\n    required: ['_id', 'type'],\n}\n\nexport const mediaCollection = new (class extends CollectionBase<IMigrateMedia> {\n    readonly name = 'n/a'\n\n    readonly schema = MigrateMediaSchema\n\n    fromSql(sql: any): void {\n        const media: IMigrateMedia = {\n            _id: sql.Id,\n            type: parseInt(sql.Type, 10),\n        }\n\n        if (sql.Container) {\n            media.containerId = sql.Container\n        }\n\n        if (sql.Position) {\n            media.position = sql.Position\n        }\n\n        const errors = validate(media, this.schema)\n\n        if (errors) {\n            throw new Error(JSON.stringify(errors))\n        }\n\n        this.cacheMigrated(media)\n    }\n\n    migrate(): Promise<void> {\n        return Promise.resolve<void>(undefined)\n    }\n})()\n"],"sourceRoot":"/home/jochenmanns/Software/git/MovieDBNode/Server/src"}
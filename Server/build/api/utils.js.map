{"version":3,"sources":["../src/api/utils.ts"],"names":[],"mappings":";;AAAA,uBAAoB;AACpB,+BAA8B;AAGjB,QAAA,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,CAAA;AAEpC,SAAgB,QAAQ,CAAC,KAAU;IAC/B,OAAO,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,IAAI,QAAQ,CAAA;AACxE,CAAC;AAFD,4BAEC;AAED,SAAgB,iBAAiB,CAC7B,SAA8D,EAC9D,OAAgB,EAChB,QAAkB;IAElB,SAAS,OAAO,CAAC,KAAU;QACvB,MAAM,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAA;QAE/B,IAAI;YACA,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;YACvB,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAA;SAC3B;QAAC,OAAO,KAAK,EAAE;YACZ,gBAAQ,CAAC,OAAO,CAAC,CAAA;SACpB;IACL,CAAC;IAED,IAAI;QACA,MAAM,MAAM,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;QACtC,MAAM,OAAO,GAAG,MAAM,YAAY,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;QAE5E,OAAO;aACF,IAAI,CAAC,IAAI,CAAC,EAAE;YACT,IAAI;gBACA,QAAQ,CAAC,MAAM,CAAC,eAAe,EAAE,8CAA8C,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;aAC9F;YAAC,OAAO,KAAK,EAAE;gBACZ,OAAO,CAAC,KAAK,CAAC,CAAA;aACjB;QACL,CAAC,EAAE,OAAO,CAAC;aACV,KAAK,CAAC,OAAO,CAAC,CAAA;KACtB;IAAC,OAAO,KAAK,EAAE;QACZ,OAAO,CAAC,KAAK,CAAC,CAAA;KACjB;AACL,CAAC;AAhCD,8CAgCC","file":"utils.js","sourcesContent":["import 'body-parser'\nimport * as debug from 'debug'\nimport { Request, Response } from 'express'\n\nexport const apiError = debug('api')\n\nexport function getError(error: any): string {\n    return typeof error === 'string' ? error : error.message || 'failed'\n}\n\nexport function processApiRequest<TResponse, TRequest = {}>(\n    processor: (body?: TRequest) => TResponse | Promise<TResponse>,\n    request: Request,\n    response: Response,\n): void {\n    function onError(error: any): void {\n        const message = getError(error)\n\n        try {\n            response.write(message)\n            response.sendStatus(400)\n        } catch (error) {\n            apiError(message)\n        }\n    }\n\n    try {\n        const result = processor(request.body)\n        const promise = result instanceof Promise ? result : Promise.resolve(result)\n\n        promise\n            .then(data => {\n                try {\n                    response.header('Cache-Control', 'private, no-cache, no-store, must-revalidate').json(data)\n                } catch (error) {\n                    onError(error)\n                }\n            }, onError)\n            .catch(onError)\n    } catch (error) {\n        onError(error)\n    }\n}\n"],"sourceRoot":"/home/jochenmanns/Software/git/MovieDBNode/Server/build"}
{"version":3,"sources":["../src/database/recording.ts"],"names":[],"mappings":";;;;;AAAA,oDAAoF;AACpF,mCAAwC;AACxC,6CAAuC;AAEvC,0CAAoC;AAEpC,MAAM,OAAO,GAAG,2CAA2C,CAAA;AAE9C,QAAA,mBAAmB,GAAG,IAAI,CAAC,KAAM,SAAQ,sBAA4B;IAA1C;;QAC3B,SAAI,GAAG,0BAAc,CAAA;QAErB,WAAM,GAAG,2BAAe,CAAA;IAkCrC,CAAC;IAhCG,OAAO,CAAC,GAAQ;QACZ,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;QAEtC,MAAM,SAAS,GAAiB;YAC5B,GAAG,EAAE,GAAG,CAAC,EAAE;YACX,OAAO,EAAE,CAAC,IAAI,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,OAAO;YAC/C,MAAM,EAAE,EAAE;YACV,SAAS,EAAE,EAAE;YACb,KAAK,EAAE,GAAG,CAAC,KAAK;YAChB,IAAI,EAAE,GAAG,CAAC,IAAI;SACjB,CAAA;QAED,IAAI,GAAG,CAAC,WAAW,EAAE;YACjB,SAAS,CAAC,WAAW,GAAG,GAAG,CAAC,WAAW,CAAA;SAC1C;QAED,IAAI,GAAG,CAAC,MAAM,EAAE;YACZ,SAAS,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAA;SAChC;QAED,IAAI,GAAG,CAAC,MAAM,EAAE;YACZ,SAAS,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAA;SAChC;QAED,MAAM,MAAM,GAAG,qBAAQ,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;QAE/C,IAAI,MAAM,EAAE;YACR,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAA;SAC1C;QAED,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAA;IACjC,CAAC;CACJ,CAAC,EAAE,CAAA","file":"recording.js","sourcesContent":["import { collectionName, IDbRecording, RecordingSchema } from './entities/recording'\nimport { CollectionBase } from './utils'\nimport { validate } from './validation'\n\nexport * from './entities/recording'\n\nconst dateReg = /^CAST\\(N'([^\\.]+)(\\.\\d+)?' AS DateTime\\)$/\n\nexport const recordingCollection = new (class extends CollectionBase<IDbRecording> {\n    readonly name = collectionName\n\n    readonly schema = RecordingSchema\n\n    fromSql(sql: any): void {\n        const date = dateReg.exec(sql.Created)\n\n        const recording: IDbRecording = {\n            _id: sql.Id,\n            created: (date && `${date[1]}Z`) || sql.Created,\n            genres: [],\n            languages: [],\n            media: sql.Media,\n            name: sql.Name,\n        }\n\n        if (sql.Description) {\n            recording.description = sql.Description\n        }\n\n        if (sql.RentTo) {\n            recording.rentTo = sql.RentTo\n        }\n\n        if (sql.Series) {\n            recording.series = sql.Series\n        }\n\n        const errors = validate(recording, this.schema)\n\n        if (errors) {\n            throw new Error(JSON.stringify(errors))\n        }\n\n        this.cacheMigrated(recording)\n    }\n})()\n"],"sourceRoot":"/home/jochenmanns/Software/git/MovieDBNode/Server/build"}
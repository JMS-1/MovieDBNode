{"version":3,"sources":["../src/database/schema.ts"],"names":[],"mappings":";;AAIA,MAAM,eAAe,GAAa;IAC9B,oBAAoB,EAAE,IAAI;IAC1B,IAAI,EAAE,IAAI;IACV,KAAK,EAAE,aAAa;IACpB,SAAS,EAAE,IAAI;IACf,OAAO,EAAE,YAAY;IACrB,SAAS,EAAE,IAAI;IACf,OAAO,EAAE,IAAI;IACb,UAAU,EAAE,SAAS;IACrB,QAAQ,EAAE,IAAI;IACd,IAAI,EAAE,QAAQ;IACd,WAAW,EAAE,IAAI;CACpB,CAAA;AAED,MAAM,iBAAiB,GAAa;IAChC,GAAG,EAAE,OAAO;IACZ,OAAO,EAAE,OAAO;IAChB,oBAAoB,EAAE,IAAI;IAC1B,OAAO,EAAE,YAAY;IACrB,UAAU,EAAE,SAAS;IACrB,QAAQ,EAAE,IAAI;IACd,IAAI,EAAE,QAAQ;CACjB,CAAA;AAED,SAAS,OAAO,CAAC,KAAU,EAAE,MAAW,EAAE,IAAY,IAAS,CAAC;AAEhE,SAAS,IAAI,CAAC,KAAU,EAAE,MAAW,EAAE,IAAY;IAC/C,MAAM,CAAC,IAAI,CAAC,GAAG,KAAK,CAAA;AACxB,CAAC;AAED,SAAS,QAAQ,CAAC,KAAa,EAAE,MAAW,EAAE,IAAY;IACtD,QAAQ,KAAK,EAAE;QACX,KAAK,OAAO,CAAC;QACb,KAAK,QAAQ,CAAC;QACd,KAAK,QAAQ;YACT,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAA;YACvB,MAAK;QACT,KAAK,SAAS;YACV,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAA;YACvB,MAAK;QACT;YACI,MAAM,IAAI,KAAK,CAAC,0BAA0B,KAAK,GAAG,CAAC,CAAA;KAC1D;AACL,CAAC;AAED,SAAS,YAAY,CAAC,KAAa,EAAE,MAAW,EAAE,IAAY;IAC1D,MAAM,CAAC,WAAW,GAAG,KAAK,CAAA;AAC9B,CAAC;AAED,SAAS,SAAS,CAAC,KAAU,EAAE,MAAW,EAAE,IAAY;IACpD,MAAM,CAAC,UAAU,GAAG,EAAE,CAAA;IAEtB,KAAK,IAAI,IAAI,IAAI,KAAK,EAAE;QACpB,IAAI,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;YAC5B,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,eAAe,CAAC,CAAA;SACxE;KACJ;AACL,CAAC;AAED,SAAS,aAAa,CAAC,KAAU,EAAE,MAAW,EAAE,IAAY;IACxD,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,KAAK,EAAE,eAAe,CAAC,CAAA;AACxD,CAAC;AAED,SAAS,aAAa,CAAC,MAAW,EAAE,OAAiB;IACjD,MAAM,KAAK,GAAQ,EAAE,CAAA;IAErB,KAAK,IAAI,IAAI,IAAI,MAAM,EAAE;QACrB,IAAI,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;YAC7B,MAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;YAE5B,IAAI,CAAC,MAAM,EAAE;gBACT,MAAM,IAAI,KAAK,CAAC,yBAAyB,IAAI,kBAAkB,CAAC,CAAA;aACnE;YAED,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;SACpC;KACJ;IAED,OAAO,KAAK,CAAA;AAChB,CAAC;AAED,SAAgB,cAAc,CAAC,MAAW;IACtC,OAAO,aAAa,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAA;AACnD,CAAC;AAFD,wCAEC","file":"schema.js","sourcesContent":["interface IMappers {\n    [prop: string]: (value: any, target: any, prop: string) => void\n}\n\nconst dataPropsMapper: IMappers = {\n    additionalProperties: copy,\n    enum: copy,\n    items: arrayElements,\n    maxLength: copy,\n    message: errorMessage,\n    minLength: copy,\n    pattern: copy,\n    properties: subObject,\n    required: copy,\n    type: dataType,\n    uniqueItems: copy,\n}\n\nconst schemaPropsMapper: IMappers = {\n    $id: discard,\n    $schema: discard,\n    additionalProperties: copy,\n    message: errorMessage,\n    properties: subObject,\n    required: copy,\n    type: dataType,\n}\n\nfunction discard(value: any, target: any, prop: string): void {}\n\nfunction copy(value: any, target: any, prop: string): void {\n    target[prop] = value\n}\n\nfunction dataType(value: string, target: any, prop: string): void {\n    switch (value) {\n        case 'array':\n        case 'object':\n        case 'string':\n            target.bsonType = value\n            break\n        case 'integer':\n            target.bsonType = 'int'\n            break\n        default:\n            throw new Error(`unsupported data type '${value}'`)\n    }\n}\n\nfunction errorMessage(value: string, target: any, prop: string): void {\n    target.description = value\n}\n\nfunction subObject(value: any, target: any, prop: string): void {\n    target.properties = {}\n\n    for (let prop in value) {\n        if (value.hasOwnProperty(prop)) {\n            target.properties[prop] = mapProperties(value[prop], dataPropsMapper)\n        }\n    }\n}\n\nfunction arrayElements(value: any, target: any, prop: string): void {\n    target.items = mapProperties(value, dataPropsMapper)\n}\n\nfunction mapProperties(object: any, mappers: IMappers): any {\n    const mongo: any = {}\n\n    for (let prop in object) {\n        if (object.hasOwnProperty(prop)) {\n            const mapper = mappers[prop]\n\n            if (!mapper) {\n                throw new Error(`can not map property '${prop}' to $jsonSchema`)\n            }\n\n            mapper(object[prop], mongo, prop)\n        }\n    }\n\n    return mongo\n}\n\nexport function convertToMongo(schema: any): any {\n    return mapProperties(schema, schemaPropsMapper)\n}\n"],"sourceRoot":"/home/jochenmanns/Software/git/MovieDBNode/Server/build"}
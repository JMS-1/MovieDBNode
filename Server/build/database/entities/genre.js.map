{"version":3,"sources":["../src/database/entities/genre.ts"],"names":[],"mappings":";;AAAA,mCAAkC;AAErB,QAAA,cAAc,GAAG,QAAQ,CAAA;AAYzB,QAAA,WAAW,GAAG;IACvB,OAAO,EAAE,gCAAgC;IACzC,GAAG,EAAE,kDAAkD;IACvD,oBAAoB,EAAE,KAAK;IAC3B,IAAI,EAAE,QAAQ;IACd,OAAO,EAAE,qBAAqB;IAC9B,UAAU,EAAE;QACR,OAAiB,EAAE;YACf,OAAO,EAAE,4CAA4C;YACrD,OAAO,EAAE,gBAAQ;YACjB,IAAI,EAAE,QAAQ;SACjB;QACD,QAAkB,EAAE;YAChB,SAAS,EAAE,GAAG;YACd,OAAO,EAAE,mCAAmC;YAC5C,SAAS,EAAE,CAAC;YACZ,IAAI,EAAE,QAAQ;SACjB;KACJ;IACD,QAAQ,EAAE,eAAmC;CAChD,CAAA","file":"genre.js","sourcesContent":["import { uniqueId } from './utils'\n\nexport const collectionName = 'genres'\n\nconst enum GenreFields {\n    _id = '_id',\n    name = 'name',\n}\n\nexport interface IDbGenre {\n    [GenreFields._id]: string\n    [GenreFields.name]: string\n}\n\nexport const GenreSchema = {\n    $schema: 'http://json-schema.org/schema#',\n    $id: 'http://psimarron.net/schemas/movie-db/genre.json',\n    additionalProperties: false,\n    type: 'object',\n    message: 'Genre unvollständig',\n    properties: {\n        [GenreFields._id]: {\n            message: 'Eindeutige Kennung fehlt oder ist ungültig',\n            pattern: uniqueId,\n            type: 'string',\n        },\n        [GenreFields.name]: {\n            maxLength: 100,\n            message: 'Name nicht angegeben oder zu lang',\n            minLength: 1,\n            type: 'string',\n        },\n    },\n    required: [GenreFields._id, GenreFields.name],\n}\n"],"sourceRoot":"/home/jochenmanns/Software/git/MovieDBNode/Server/build"}
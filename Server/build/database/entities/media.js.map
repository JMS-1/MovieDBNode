{"version":3,"sources":["../src/database/entities/media.ts"],"names":[],"mappings":";;AAEA,mCAAkC;AAErB,QAAA,cAAc,GAAG,QAAQ,CAAA;AAgBzB,QAAA,WAAW,GAAG;IACvB,OAAO,EAAE,gCAAgC;IACzC,GAAG,EAAE,kDAAkD;IACvD,oBAAoB,EAAE,KAAK;IAC3B,IAAI,EAAE,QAAQ;IACd,OAAO,EAAE,sBAAsB;IAC/B,UAAU,EAAE;QACR,OAAiB,EAAE;YACf,OAAO,EAAE,4CAA4C;YACrD,OAAO,EAAE,gBAAQ;YACjB,IAAI,EAAE,QAAQ;SACjB;QACD,aAAuB,EAAE;YACrB,OAAO,EAAE,qBAAqB;YAC9B,OAAO,EAAE,gBAAQ;YACjB,IAAI,EAAE,QAAQ;SACjB;QACD,YAAsB,EAAE;YACpB,SAAS,EAAE,GAAG;YACd,OAAO,EAAE,kBAAkB;YAC3B,IAAI,EAAE,QAAQ;SACjB;QACD,QAAkB,EAAE;YAChB,OAAO,EAAE,qCAAqC;YAC9C,IAAI,EAAE,SAAS;YACf,IAAI,EAAE;;;;;;;aAOL;SACJ;KACJ;IACD,QAAQ,EAAE,eAAmC;CAChD,CAAA","file":"media.js","sourcesContent":["import { mediaType } from 'movie-db-api'\n\nimport { uniqueId } from './utils'\n\nexport const collectionName = 'medias'\n\nconst enum MediaFields {\n    _id = '_id',\n    container = 'container',\n    position = 'position',\n    type = 'type',\n}\n\nexport interface IDbMedia {\n    [MediaFields._id]: string\n    [MediaFields.container]?: string\n    [MediaFields.position]?: string\n    [MediaFields.type]: mediaType\n}\n\nexport const MediaSchema = {\n    $schema: 'http://json-schema.org/schema#',\n    $id: 'http://psimarron.net/schemas/movie-db/media.json',\n    additionalProperties: false,\n    type: 'object',\n    message: 'Medium unvollst채ndig',\n    properties: {\n        [MediaFields._id]: {\n            message: 'Eindeutige Kennung fehlt oder ist ung체ltig',\n            pattern: uniqueId,\n            type: 'string',\n        },\n        [MediaFields.container]: {\n            message: 'Ablage ist ung체ltig',\n            pattern: uniqueId,\n            type: 'string',\n        },\n        [MediaFields.position]: {\n            maxLength: 100,\n            message: 'Standort zu lang',\n            type: 'string',\n        },\n        [MediaFields.type]: {\n            message: 'Medienart fehlt oder ist unzul채ssig',\n            type: 'integer',\n            enum: [\n                mediaType.BluRay,\n                mediaType.DVD,\n                mediaType.RecordedDVD,\n                mediaType.SuperVideoCD,\n                mediaType.Undefined,\n                mediaType.VideoCD,\n            ],\n        },\n    },\n    required: [MediaFields._id, MediaFields.type],\n}\n"],"sourceRoot":"/home/jochenmanns/Software/git/MovieDBNode/Server/build"}
{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/database/utils.ts"],"names":[],"mappings":";;AAAA,qCAAyC;AAIzC,6CAAuC;AAEvC,oCAAmC;AAEnC,IAAI,MAA4B,CAAA;AAEhC,SAAS,KAAK,CAAC,EAAU;IACrB,OAAO,IAAI,OAAO,CAAO,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAA;AAChE,CAAC;AAEM,KAAK,UAAU,SAAS;IAC3B,QAAS,MAAM,KAAK,CAAC,IAAI,CAAC,EAAE;QACxB,IAAI,CAAC,MAAM,EAAE;YACT,MAAM,GAAG,qBAAW,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE;gBAC/C,aAAa,EAAE,IAAI;gBACnB,cAAc,EAAE,OAAO;gBACvB,cAAc,EAAE,MAAM,CAAC,SAAS;gBAChC,eAAe,EAAE,IAAI;aACxB,CAAC,CAAA;SACL;QAED,IAAI;YACA,MAAM,MAAM,GAAG,MAAM,MAAM,CAAA;YAE3B,OAAO,MAAM,CAAC,EAAE,EAAE,CAAA;SACrB;QAAC,OAAO,CAAC,EAAE;YACR,MAAM,GAAG,IAAI,CAAA;SAChB;KACJ;AACL,CAAC;AAnBD,8BAmBC;AAED,MAAsB,cAAc;IAKhC,KAAK,CAAC,MAAM,CAAC,SAAgB;QACzB,IAAI;YACA,MAAM,EAAE,GAAG,MAAM,SAAS,EAAE,CAAA;YAC5B,MAAM,EAAE,GAAG,MAAM,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YAEzC,MAAM,EAAE,CAAC,SAAS,CAAC,SAAS,CAAC,CAAA;YAE7B,OAAO,SAAS,CAAA;SACnB;QAAC,OAAO,KAAK,EAAE;YACZ,IAAI,KAAK,CAAC,IAAI,KAAK,GAAG,EAAE;gBACpB,MAAM,KAAK,CAAA;aACd;YAED,IAAI;gBACA,OAAO,CACH,qBAAQ,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI;oBAChC;wBACI,SAAS,EAAE,UAAU;wBACrB,OAAO,EAAE,gBAAQ,CAAC,KAAK,CAAC;wBACxB,QAAQ,EAAE,GAAG;qBAChB;iBACJ,CACJ,CAAA;aACJ;YAAC,OAAO,CAAC,EAAE;gBACR,MAAM,KAAK,CAAA;aACd;SACJ;IACL,CAAC;CACJ;AAjCD,wCAiCC","sourcesContent":["import { Db, MongoClient } from 'mongodb'\n\nimport { IValidatableSchema, IValidationError } from 'movie-db-api'\n\nimport { validate } from './validation'\n\nimport { getError } from '../utils'\n\nlet loader: Promise<MongoClient>\n\nfunction sleep(ms: number): Promise<void> {\n    return new Promise<void>(success => setTimeout(success, ms))\n}\n\nexport async function dbConnect(): Promise<Db> {\n    for (; ; await sleep(5000)) {\n        if (!loader) {\n            loader = MongoClient.connect(process.env.DATABASE, {\n                autoReconnect: true,\n                promiseLibrary: Promise,\n                reconnectTries: Number.MAX_VALUE,\n                useNewUrlParser: true,\n            })\n        }\n\n        try {\n            const client = await loader\n\n            return client.db()\n        } catch (e) {\n            loader = null\n        }\n    }\n}\n\nexport abstract class CollectionBase<TType> {\n    abstract readonly name: string\n\n    abstract readonly schema: IValidatableSchema\n\n    async insert(container: TType): Promise<IValidationError[]> {\n        try {\n            const db = await dbConnect()\n            const me = await db.collection(this.name)\n\n            await me.insertOne(container)\n\n            return undefined\n        } catch (error) {\n            if (error.code !== 121) {\n                throw error\n            }\n\n            try {\n                return (\n                    validate(container, this.schema) || [\n                        {\n                            contraint: 'database',\n                            message: getError(error),\n                            property: '*',\n                        },\n                    ]\n                )\n            } catch (e) {\n                throw error\n            }\n        }\n    }\n}\n"]}
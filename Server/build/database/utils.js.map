{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/database/utils.ts"],"names":[],"mappings":";;AAAA,qCAAyC;AAEzC,IAAI,MAA4B,CAAA;AAEhC,SAAS,KAAK,CAAC,EAAU;IACrB,OAAO,IAAI,OAAO,CAAO,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAA;AAChE,CAAC;AAEM,KAAK,UAAU,SAAS;IAC3B,QAAS,MAAM,KAAK,CAAC,IAAI,CAAC,EAAE;QACxB,IAAI,CAAC,MAAM,EAAE;YACT,MAAM,GAAG,qBAAW,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE;gBAC/C,aAAa,EAAE,IAAI;gBACnB,cAAc,EAAE,OAAO;gBACvB,cAAc,EAAE,MAAM,CAAC,SAAS;gBAChC,eAAe,EAAE,IAAI;aACxB,CAAC,CAAA;SACL;QAED,IAAI;YACA,MAAM,MAAM,GAAG,MAAM,MAAM,CAAA;YAE3B,OAAO,MAAM,CAAC,EAAE,EAAE,CAAA;SACrB;QAAC,OAAO,CAAC,EAAE;YACR,MAAM,GAAG,IAAI,CAAA;SAChB;KACJ;AACL,CAAC;AAnBD,8BAmBC","sourcesContent":["import { Db, MongoClient } from 'mongodb'\n\nlet loader: Promise<MongoClient>\n\nfunction sleep(ms: number): Promise<void> {\n    return new Promise<void>(success => setTimeout(success, ms))\n}\n\nexport async function dbConnect(): Promise<Db> {\n    for (; ; await sleep(5000)) {\n        if (!loader) {\n            loader = MongoClient.connect(process.env.DATABASE, {\n                autoReconnect: true,\n                promiseLibrary: Promise,\n                reconnectTries: Number.MAX_VALUE,\n                useNewUrlParser: true,\n            })\n        }\n\n        try {\n            const client = await loader\n\n            return client.db()\n        } catch (e) {\n            loader = null\n        }\n    }\n}\n"]}
{"version":3,"sources":["../src/database/migration.ts"],"names":[],"mappings":"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","file":"migration.js","sourcesContent":["import * as fs from 'fs'\nimport { join } from 'path'\nimport { promisify } from 'util'\n\nimport { containerCollection } from './container'\nimport { genreCollection } from './genre'\nimport { languageCollection } from './language'\nimport { seriesCollection } from './series'\n\nconst readFile = promisify(fs.readFile)\n\nconst temp = '\\ufeff'\n\nconst doubleQuote = /''/g\nconst fieldReg = /\\[([^\\]]+)\\]/g\nconst insertReg = /^INSERT \\[dbo\\]\\.\\[([^\\]]+)\\] \\(([^\\)]+)\\) VALUES \\((.+)\\)$/\nconst normReg = /(N'([^']|'')*')/g\nconst tempOff = new RegExp(temp, 'g')\nconst tempOn = /,/g\n\nexport async function runMigration(): Promise<void> {\n    const collections = {\n        Containers: containerCollection,\n        Genres: genreCollection,\n        Languages: languageCollection,\n        Series: seriesCollection,\n    }\n\n    const path = join(__dirname, '../../../legacy/all.sql')\n    const all = await readFile(path)\n    const str = all.toString('UCS2')\n\n    for (let line of str.split('\\r\\n')) {\n        const insert = insertReg.exec(line)\n\n        if (!insert) {\n            continue\n        }\n\n        const table = <keyof typeof collections>insert[1]\n        const collection = collections[table]\n\n        if (!collection) {\n            continue\n        }\n\n        const fields = insert[2].split(',').map(f => f.trim().replace(fieldReg, (m, n) => n))\n        const data = insert[3].replace(normReg, (m, n) => n.replace(tempOn, temp)).split(',')\n\n        if (fields.length !== data.length) {\n            throw new Error(`bad INSERT: ${line}`)\n        }\n\n        const row: any = {}\n\n        for (let i = 0; i < fields.length; i++) {\n            const value = data[i].trim().replace(tempOff, ',')\n\n            row[fields[i]] =\n                value === 'NULL'\n                    ? null\n                    : value.charAt(0) === 'N'\n                    ? value.substr(2, value.length - 3).replace(doubleQuote, \"'\")\n                    : value\n        }\n\n        await collection.fromSql(row)\n    }\n}\n"],"sourceRoot":"/home/jochenmanns/Software/git/MovieDBNode/Server/build"}
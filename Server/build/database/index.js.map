{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/database/index.ts"],"names":[],"mappings":";;AAAA,2CAAiD;AACjD,qCAAyC;AACzC,mCAAmC;AACnC,6CAAwC;AAEjC,KAAK,UAAU,kBAAkB;IACpC,MAAM,EAAE,GAAG,MAAM,iBAAS,EAAE,CAAA;IAE5B,MAAM,WAAW,GAAG,CAAC,+BAAmB,CAAC,CAAA;IAEzC,KAAK,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,WAAW,EAAE;QAEtC,sBAAS,CAAC,MAAM,CAAC,CAAA;QAGjB,MAAM,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAA;QAG/B,MAAM,EAAE,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,WAAW,EAAE,uBAAc,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAA;KAC1F;AACL,CAAC;AAfD,gDAeC","sourcesContent":["import { containerCollection } from './container'\nimport { convertToMongo } from './schema'\nimport { dbConnect } from './utils'\nimport { addSchema } from './validation'\n\nexport async function initializeDatabase(): Promise<void> {\n    const db = await dbConnect()\n\n    const collections = [containerCollection]\n\n    for (let { schema, name } of collections) {\n        // Interne Prüfumgebung initialisieren.\n        addSchema(schema)\n\n        // Eventuell die Tabelle erstmalig anlegen.\n        await db.createCollection(name)\n\n        // Immer die Prüfregeln in der Datenbank auf den neuesten Stand bringen.\n        await db.command({ collMod: name, validator: { $jsonSchema: convertToMongo(schema) } })\n    }\n}\n"]}
{"version":3,"file":"validation.js","sourceRoot":"","sources":["../../src/database/validation.ts"],"names":[],"mappings":";;AAAA,2BAA0B;AAE1B,MAAM,OAAO,GAAG,8CAA8C,CAAA;AAE9D,MAAM,UAAU,GAAG,IAAI,GAAG,EAAE,CAAA;AAiB5B,SAAgB,SAAS,CAA0B,MAAe;IAC9D,SAAS,YAAY,CAAC,SAAiB;QACnC,IAAI,KAAK,GAAQ,MAAM,CAAA;QAEvB,MAAM,KAAK,GAAG,EAAE,CAAA;QAEhB,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;YACjC,MAAM,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YAChC,MAAM,KAAK,GAAG,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,CAAA;YAE/B,IAAI,KAAK,EAAE;gBACP,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;gBAEjB,KAAK,GAAG,CAAC,KAAK,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,CAAA;aAChD;SACJ;QAED,OAAO,gCAAgC,SAAS,iBAAiB,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;YAC5E,GAAG,gBAAgB,KAAK,CAAC,OAAO,IAAI,EAAE,SAAS,CAAA;IACvD,CAAC;IAED,UAAU,CAAC,eAAe,CAAC,YAAY,CAAC,CAAA;IACxC,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;IAExC,UAAU,CAAC,eAAe,CAAC,SAAS,CAAC,CAAA;AACzC,CAAC;AAzBD,8BAyBC;AAED,SAAgB,QAAQ,CAA0B,MAAW,EAAE,MAAe;IAC1E,OAAY,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;AACvD,CAAC;AAFD,4BAEC","sourcesContent":["import * as djv from 'djv'\n\nconst propReg = /^\\[decodeURIComponent\\(['\"]([^'\"]+)['\"]\\)\\]$/\n\nconst validation = new djv()\n\nexport interface IValidationError {\n    readonly contraint: string\n    readonly property: string\n    readonly message: string\n}\n\ninterface IScope {\n    message: string\n    properties?: any\n}\n\ninterface ISchema extends IScope {\n    $id: string\n}\n\nexport function addSchema<TSchema extends ISchema>(schema: TSchema): void {\n    function errorHandler(errorType: string): string {\n        let scope: any = schema\n\n        const props = []\n\n        for (let prop of this.data.slice(1)) {\n            const match = propReg.exec(prop)\n            const found = match && match[1]\n\n            if (found) {\n                props.push(found)\n\n                scope = (scope.properties || {})[found] || {}\n            }\n        }\n\n        return `{ errors.push({ constraint: \"${errorType}\", property: \"${props.join('.') ||\n            '*'}\", message: \"${scope.message || ''}\" }); }`\n    }\n\n    validation.setErrorHandler(errorHandler)\n    validation.addSchema(schema.$id, schema)\n\n    validation.setErrorHandler(undefined)\n}\n\nexport function validate<TSchema extends ISchema>(object: any, schema: TSchema): IValidationError[] {\n    return <any>validation.validate(schema.$id, object)\n}\n"]}
{"version":3,"sources":["../src/migration/links.ts"],"names":[],"mappings":";;AAAA,+BAAiC;AAEjC,sDAAqD;AACrD,6CAAkD;AAClD,uDAAiD;AAoBpC,QAAA,UAAU,GAAG;IACtB,OAAO,EAAE,gCAAgC;IACzC,GAAG,EAAE,yDAAyD;IAC9D,oBAAoB,EAAE,KAAK;IAC3B,IAAI,EAAE,QAAQ;IACd,OAAO,EAAE,uBAAuB;IAChC,UAAU,EAAE;QACR,OAAgB,EAAE;YACd,OAAO,EAAE,4CAA4C;YACrD,OAAO,EAAE,gBAAQ;YACjB,IAAI,EAAE,QAAQ;SACjB;QACD,eAAwB,EAAE;YACtB,SAAS,EAAE,IAAI;YACf,OAAO,EAAE,0BAA0B;YACnC,IAAI,EAAE,QAAQ;SACjB;QACD,OAAgB,EAAE;YACd,OAAO,EAAE,8CAA8C;YACvD,OAAO,EAAE,gBAAQ;YACjB,IAAI,EAAE,QAAQ;SACjB;QACD,QAAiB,EAAE;YACf,SAAS,EAAE,GAAG;YACd,OAAO,EAAE,mCAAmC;YAC5C,SAAS,EAAE,CAAC;YACZ,IAAI,EAAE,QAAQ;SACjB;QACD,WAAoB,EAAE;YAClB,OAAO,EAAE,mCAAmC;YAC5C,OAAO,EAAE,CAAC;YACV,IAAI,EAAE,SAAS;SAClB;QACD,OAAgB,EAAE;YACd,SAAS,EAAE,IAAI;YACf,OAAO,EAAE,qBAAqB;YAC9B,IAAI,EAAE,QAAQ;SACjB;KACJ;IACD,QAAQ,EAAE,wCAAqF;CAClG,CAAA;AAEY,QAAA,cAAc,GAAG,IAAI,CAAC,KAAM,SAAQ,sBAAqB;IAAnC;;QACtB,SAAI,GAAG,KAAK,CAAA;QAEZ,WAAM,GAAG,kBAAU,CAAA;IAuBhC,CAAC;IArBG,OAAO,CAAC,GAAQ;QACZ,MAAM,IAAI,GAAU;YAChB,GAAG,EAAE,SAAI,EAAE;YACX,GAAG,EAAE,GAAG,CAAC,GAAG;YACZ,IAAI,EAAE,GAAG,CAAC,IAAI,IAAI,EAAE;YACpB,OAAO,EAAE,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC;YAClC,GAAG,EAAE,GAAG,CAAC,GAAG;SACf,CAAA;QAED,IAAI,GAAG,CAAC,WAAW,EAAE;YACjB,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC,WAAW,CAAA;SACrC;QAED,MAAM,MAAM,GAAG,qBAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;QAE1C,IAAI,MAAM,EAAE;YACR,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAA;SAC1C;QAED,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAA;IAC5B,CAAC;CACJ,CAAC,EAAE,CAAA","file":"links.js","sourcesContent":["import { v4 as uuid } from 'uuid'\n\nimport { uniqueId } from '../database/entities/utils'\nimport { CollectionBase } from '../database/utils'\nimport { validate } from '../database/validation'\n\nconst enum LinkFields {\n    _id = '_id',\n    description = 'description',\n    for = 'for',\n    name = 'name',\n    ordinal = 'ordinal',\n    url = 'url',\n}\n\nexport interface ILink {\n    [LinkFields._id]: string\n    [LinkFields.description]?: string\n    [LinkFields.for]: string\n    [LinkFields.name]: string\n    [LinkFields.ordinal]: number\n    [LinkFields.url]: string\n}\n\nexport const LinkSchema = {\n    $schema: 'http://json-schema.org/schema#',\n    $id: 'http://psimarron.net/schemas/movie-db/migrate/link.json',\n    additionalProperties: false,\n    type: 'object',\n    message: 'Verweis unvollst채ndig',\n    properties: {\n        [LinkFields._id]: {\n            message: 'Eindeutige Kennung fehlt oder ist ung체ltig',\n            pattern: uniqueId,\n            type: 'string',\n        },\n        [LinkFields.description]: {\n            maxLength: 2000,\n            message: 'Beschreibung ist zu lang',\n            type: 'string',\n        },\n        [LinkFields.for]: {\n            message: 'Aufzeichnungskennung fehlt oder ist ung체ltig',\n            pattern: uniqueId,\n            type: 'string',\n        },\n        [LinkFields.name]: {\n            maxLength: 100,\n            message: 'Name nicht angegeben oder zu lang',\n            minLength: 1,\n            type: 'string',\n        },\n        [LinkFields.ordinal]: {\n            message: 'Anordnung fehlt oder ist ung체ltig',\n            minimum: 0,\n            type: 'integer',\n        },\n        [LinkFields.url]: {\n            maxLength: 2000,\n            message: 'Verweis ist zu lang',\n            type: 'string',\n        },\n    },\n    required: [LinkFields._id, LinkFields.name, LinkFields.for, LinkFields.url, LinkFields.ordinal],\n}\n\nexport const linkCollection = new (class extends CollectionBase<ILink> {\n    readonly name = 'n/a'\n\n    readonly schema = LinkSchema\n\n    fromSql(sql: any): void {\n        const link: ILink = {\n            _id: uuid(),\n            for: sql.For,\n            name: sql.Name || '',\n            ordinal: parseInt(sql.Ordinal, 10),\n            url: sql.Url,\n        }\n\n        if (sql.Description) {\n            link.description = sql.Description\n        }\n\n        const errors = validate(link, this.schema)\n\n        if (errors) {\n            throw new Error(JSON.stringify(errors))\n        }\n\n        this.cacheMigrated(link)\n    }\n})()\n"],"sourceRoot":"/home/jochenmanns/Software/git/MovieDBNode/Server/build"}
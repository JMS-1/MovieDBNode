{"version":3,"sources":["../src/migration/relation.ts"],"names":[],"mappings":";;AAAA,sDAAqD;AACrD,uDAAiD;AAYpC,QAAA,cAAc,GAAG;IAC1B,OAAO,EAAE,gCAAgC;IACzC,GAAG,EAAE,6DAA6D;IAClE,oBAAoB,EAAE,KAAK;IAC3B,IAAI,EAAE,QAAQ;IACd,OAAO,EAAE,uBAAuB;IAChC,UAAU,EAAE;QACR,QAAqB,EAAE;YACnB,OAAO,EAAE,sCAAsC;YAC/C,OAAO,EAAE,gBAAQ;YACjB,IAAI,EAAE,QAAQ;SACjB;QACD,MAAmB,EAAE;YACjB,OAAO,EAAE,qCAAqC;YAC9C,OAAO,EAAE,gBAAQ;YACjB,IAAI,EAAE,QAAQ;SACjB;KACJ;IACD,QAAQ,EAAE,cAAwC;CACrD,CAAA;AAED,MAAa,kBAAkB;IAG3B,YAA6B,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;QAF1B,cAAS,GAAgB,EAAE,CAAA;IAEE,CAAC;IAE/C,OAAO,CAAC,GAAQ;QACZ,MAAM,QAAQ,GAAc;YACxB,IAAI,EAAE,GAAG,CAAC,SAAS;YACnB,EAAE,EAAE,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;SACvB,CAAA;QAED,MAAM,MAAM,GAAG,qBAAQ,CAAC,QAAQ,EAAE,sBAAc,CAAC,CAAA;QAEjD,IAAI,MAAM,EAAE;YACR,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAA;SAC1C;QAED,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;IACjC,CAAC;CACJ;AAnBD,gDAmBC","file":"relation.js","sourcesContent":["import { uniqueId } from '../database/entities/utils'\nimport { validate } from '../database/validation'\n\nconst enum RelationFields {\n    from = 'from',\n    to = 'to',\n}\n\nexport interface IRelation {\n    [RelationFields.from]: string\n    [RelationFields.to]: string\n}\n\nexport const RelationSchema = {\n    $schema: 'http://json-schema.org/schema#',\n    $id: 'http://psimarron.net/schemas/movie-db/migrate/relation.json',\n    additionalProperties: false,\n    type: 'object',\n    message: 'Verweis unvollständig',\n    properties: {\n        [RelationFields.from]: {\n            message: 'Quellkennung fehlt oder ist ungültig',\n            pattern: uniqueId,\n            type: 'string',\n        },\n        [RelationFields.to]: {\n            message: 'Zielkennung fehlt oder ist ungültig',\n            pattern: uniqueId,\n            type: 'string',\n        },\n    },\n    required: [RelationFields.from, RelationFields.to],\n}\n\nexport class RelationCollection {\n    private readonly _migrated: IRelation[] = []\n\n    constructor(private readonly _other: string) {}\n\n    fromSql(sql: any): void {\n        const relation: IRelation = {\n            from: sql.Recording,\n            to: sql[this._other],\n        }\n\n        const errors = validate(relation, RelationSchema)\n\n        if (errors) {\n            throw new Error(JSON.stringify(errors))\n        }\n\n        this._migrated.push(relation)\n    }\n}\n"],"sourceRoot":"/home/jochenmanns/Software/git/MovieDBNode/Server/build"}
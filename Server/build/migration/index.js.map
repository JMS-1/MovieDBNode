{"version":3,"sources":["../src/migration/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import * as fs from 'fs'\nimport { join } from 'path'\nimport { promisify } from 'util'\n\nimport { linkCollection } from './links'\nimport { RelationCollection, RelationSchema } from './relation'\n\nimport { containerCollection } from '../database/container'\nimport { genreCollection } from '../database/genre'\nimport { languageCollection } from '../database/language'\nimport { mediaCollection } from '../database/media'\nimport { LinkSchema, recordingCollection } from '../database/recording'\nimport { seriesCollection } from '../database/series'\nimport { addSchema, validate } from '../database/validation'\n\nconst readFile = promisify(fs.readFile)\n\nconst temp = '\\ufeff'\n\nconst doubleQuote = /''/g\nconst fieldReg = /\\[([^\\]]+)\\]/g\nconst insertReg = /^INSERT \\[dbo\\]\\.\\[([^\\]]+)\\] \\(([^\\)]+)\\) VALUES \\((.+)\\)$/\nconst normReg = /(N'([^']|'')*')/g\nconst tempOff = new RegExp(temp, 'g')\nconst tempOn = /,/g\n\nconst genreLinks = new (class extends RelationCollection {})('Genre')\n\nconst languageLinks = new (class extends RelationCollection {})('Language')\n\nexport async function runMigration(): Promise<void> {\n    addSchema(LinkSchema)\n    addSchema(RelationSchema)\n\n    const collections = {\n        Containers: containerCollection,\n        Genres: genreCollection,\n        Languages: languageCollection,\n        Links: linkCollection,\n        Media: mediaCollection,\n        RecordingGenres: genreLinks,\n        RecordingLanguages: languageLinks,\n        Recordings: recordingCollection,\n        Series: seriesCollection,\n    }\n\n    const path = join(__dirname, '../../../legacy/all.sql')\n    const all = await readFile(path)\n    const str = all.toString('UCS2')\n\n    for (let line of str.split('\\r\\n')) {\n        const insert = insertReg.exec(line)\n\n        if (!insert) {\n            continue\n        }\n\n        const table = <keyof typeof collections>insert[1]\n        const collection = collections[table]\n\n        if (!collection) {\n            continue\n        }\n\n        const fields = insert[2].split(',').map(f => f.trim().replace(fieldReg, (m, n) => n))\n        const data = insert[3].replace(normReg, (m, n) => n.replace(tempOn, temp)).split(',')\n\n        if (fields.length !== data.length) {\n            throw new Error(`bad INSERT: ${line}`)\n        }\n\n        const row: any = {}\n\n        for (let i = 0; i < fields.length; i++) {\n            const value = data[i].trim().replace(tempOff, ',')\n\n            row[fields[i]] =\n                value === 'NULL'\n                    ? null\n                    : value.charAt(0) === 'N'\n                    ? value.substr(2, value.length - 3).replace(doubleQuote, \"'\")\n                    : value\n        }\n\n        await collection.fromSql(row)\n    }\n\n    const recordings = recordingCollection.migrationMap\n\n    for (let link of genreLinks.migrated) {\n        const recording = recordings[link.from]\n        const genre = genreCollection.migrationMap[link.to]\n\n        if (!recording) {\n            throw new Error(`recording ${link.from} not found`)\n        }\n\n        if (!genre) {\n            throw new Error(`genre ${link.to} not found`)\n        }\n\n        recording.genres.push(genre._id)\n    }\n\n    for (let link of languageLinks.migrated) {\n        const recording = recordings[link.from]\n        const language = languageCollection.migrationMap[link.to]\n\n        if (!recording) {\n            throw new Error(`recording ${link.from} not found`)\n        }\n\n        if (!language) {\n            throw new Error(`language ${link.to} not found`)\n        }\n\n        recording.languages.push(language._id)\n    }\n\n    for (let link of Object.values(linkCollection.migrationMap)) {\n        const recording = recordings[link.for]\n\n        if (!recording) {\n            throw new Error(`recording ${link.for} not found`)\n        }\n\n        if (recording.links[link.ordinal]) {\n            throw new Error(`duplicate link ordinal in recording ${link.for}`)\n        }\n\n        recording.links[link.ordinal] = { name: link.name, url: link.url }\n\n        if (link.description) {\n            recording.links[link.ordinal].description = link.description\n        }\n    }\n\n    for (let recording of Object.values(recordings)) {\n        const test = validate(recording, recordingCollection.schema)\n\n        if (test) {\n            throw new Error(JSON.stringify(test))\n        }\n    }\n\n    for (let collection of Object.values(collections)) {\n        await collection.migrate()\n    }\n}\n"],"sourceRoot":"/home/jochenmanns/Software/git/MovieDBNode/Server/build"}